diff -Naur mock-1.4.14/py/mockbuild/plugins/hw_info.py mock-1.4.14.tpg/py/mockbuild/plugins/hw_info.py
--- mock-1.4.14/py/mockbuild/plugins/hw_info.py	2019-02-19 11:14:21.000000000 +0000
+++ mock-1.4.14.tpg/py/mockbuild/plugins/hw_info.py	2019-03-04 19:31:39.324000000 +0000
@@ -42,12 +42,12 @@
         out.write("CPU info:\n")
         out.write(output)
 
-        cmd = ["/usr/bin/free"]
+        cmd = ["/bin/free"]
         output = mockbuild.util.do(cmd, shell=False, returnOutput=True, raiseExc=False)
         out.write("\n\nMemory:\n")
         out.write(output)
 
-        cmd = ["/usr/bin/df", "-H", self.buildroot.make_chroot_path()]
+        cmd = ["/bin/df", "-H", self.buildroot.make_chroot_path()]
         output = mockbuild.util.do(cmd, shell=False, returnOutput=True, raiseExc=False)
         out.write("\n\nStorage:\n")
         out.write(output)
diff -Naur mock-1.4.14/py/mockbuild/plugins/root_cache.py mock-1.4.14.tpg/py/mockbuild/plugins/root_cache.py
--- mock-1.4.14/py/mockbuild/plugins/root_cache.py	2019-02-19 11:14:21.000000000 +0000
+++ mock-1.4.14.tpg/py/mockbuild/plugins/root_cache.py	2019-03-04 19:32:09.018000000 +0000
@@ -35,7 +35,7 @@
         self.rootCacheFile = os.path.join(self.rootSharedCachePath, "cache.tar")
         self.rootCacheLock = None
         self.compressProgram = self.root_cache_opts['compress_program']
-        if self.compressProgram == 'pigz' and not os.path.exists('/usr/bin/pigz'):
+        if self.compressProgram == 'pigz' and not os.path.exists('/bin/pigz'):
             getLog().warning("specified 'pigz' as the root cache compress program but not available; using gzip")
             self.compressProgram = 'gzip'
         # bsdtar use different decompress program
diff -Naur mock-1.4.14/py/mockbuild/util.py mock-1.4.14.tpg/py/mockbuild/util.py
--- mock-1.4.14/py/mockbuild/util.py	2019-02-19 11:14:21.000000000 +0000
+++ mock-1.4.14.tpg/py/mockbuild/util.py	2019-03-04 19:35:17.369000000 +0000
@@ -268,7 +268,7 @@
     # we will ignore errors in machinectl, it sometimes fails for various errors (cannot find IP addr...)
     # we do not care about exit code, we just want the output
     # RHEL7 does not know --no-legend, so we must filter the legend out
-    vm_list = _safe_check_output(["/usr/bin/machinectl", "list", "--no-pager"])
+    vm_list = _safe_check_output(["/bin/machinectl", "list", "--no-pager"])
     if (isinstance(vm_list, bytes)):
         vm_list = vm_list.decode("utf-8")
     vm_list = '\n'.join(vm_list.split('\n')[1:-2])
@@ -276,7 +276,7 @@
         if len(name) > 0:
             m_uuid = name.split()[0]
             try:
-                vm_root = _safe_check_output(["/usr/bin/machinectl", "show", "-pRootDirectory", m_uuid])
+                vm_root = _safe_check_output(["/bin/machinectl", "show", "-pRootDirectory", m_uuid])
                 if (isinstance(vm_root, bytes)):
                     vm_root = vm_root.decode("utf-8")
             except subprocess.CalledProcessError:
@@ -306,7 +306,7 @@
         m_uuid = get_machinectl_uuid(rootToKill)
         if m_uuid:
             getLog().warning("Machine %s still running. Killing...", m_uuid)
-            os.system("/usr/bin/machinectl terminate %s" % m_uuid)
+            os.system("/bin/machinectl terminate %s" % m_uuid)
 
 
 @traceLog()
@@ -836,7 +836,7 @@
 
 
 def get_fs_type(path):
-    cmd = ['/usr/bin/stat', '-f', '-L', '-c', '%T', path]
+    cmd = ['/bin/stat', '-f', '-L', '-c', '%T', path]
     p = subprocess.Popen(cmd, shell=False, stdout=subprocess.PIPE,
                          universal_newlines=True)
     p.wait()
